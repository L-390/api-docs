{
  "openapi": "3.0.0",
  "paths": {
    "/v1/users/me": {
      "get": {
        "operationId": "UsersController_getMyProfile",
        "summary": "Get User",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/users/onboarding": {
      "put": {
        "operationId": "UsersController_updateOnBoarding",
        "summary": "Update onboarding",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOnboardingRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/v1/environments/me": {
      "get": {
        "operationId": "EnvironmentsController_getCurrentEnvironment",
        "summary": "Get current environment",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ]
      }
    },
    "/v1/environments": {
      "post": {
        "operationId": "EnvironmentsController_createEnvironment",
        "summary": "Create environment",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ]
      },
      "get": {
        "operationId": "EnvironmentsController_getMyEnvironments",
        "summary": "Get environments",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ]
      }
    },
    "/v1/environments/api-keys": {
      "get": {
        "operationId": "EnvironmentsController_getOrganizationApiKeys",
        "summary": "Get api keys",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ]
      }
    },
    "/v1/environments/widget/settings": {
      "put": {
        "operationId": "EnvironmentsController_updateWidgetSettings",
        "summary": "Update widget settings",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWidgetSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ]
      }
    },
    "/v1/notification-groups": {
      "post": {
        "operationId": "NotificationGroupsController_createNotificationGroup",
        "summary": "Create notification group",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationGroupRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationGroupResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Notification groups"
        ]
      },
      "get": {
        "operationId": "NotificationGroupsController_getNotificationGroups",
        "summary": "Get notification groups",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationGroupResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notification groups"
        ]
      }
    },
    "/v1/changes": {
      "get": {
        "operationId": "ChangesController_getChanges",
        "summary": "Get changes",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ]
      }
    },
    "/v1/changes/count": {
      "get": {
        "operationId": "ChangesController_getChangesCount",
        "summary": "Get changes count",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ]
      }
    },
    "/v1/changes/bulk/apply": {
      "post": {
        "operationId": "ChangesController_bulkApplyDiff",
        "summary": "Apply changes",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ]
      }
    },
    "/v1/changes/{changeId}/apply": {
      "post": {
        "operationId": "ChangesController_applyDiff",
        "summary": "Apply change",
        "parameters": [
          {
            "name": "changeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ]
      }
    },
    "/v1/notification-templates": {
      "get": {
        "operationId": "NotificationTemplateController_getNotificationTemplates",
        "summary": "Get notification templates",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ]
      },
      "post": {
        "operationId": "NotificationTemplateController_createNotificationTemplates",
        "summary": "Create notification template",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationTemplateRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ]
      }
    },
    "/v1/notification-templates/{templateId}": {
      "put": {
        "operationId": "NotificationTemplateController_updateTemplateById",
        "summary": "Update notification template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationTemplateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ]
      },
      "delete": {
        "operationId": "NotificationTemplateController_deleteTemplateById",
        "summary": "Delete notification template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ]
      },
      "get": {
        "operationId": "NotificationTemplateController_getNotificationTemplateById",
        "summary": "Get notification template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ]
      }
    },
    "/v1/notification-templates/{templateId}/status": {
      "put": {
        "operationId": "NotificationTemplateController_changeActiveStatus",
        "summary": "Update notification template status",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTemplateStatusRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ]
      }
    },
    "/v1/events/trigger": {
      "post": {
        "operationId": "EventsController_trackEvent",
        "summary": "Trigger event",
        "description": "\n    Trigger event is the main (and the only) way to send notification to subscribers. \n    The trigger identifier is used to match the particular template associated with it. \n    Additional information can be passed according the the body interface below.\n    ",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerEventRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerEventResponseDto"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/trigger/broadcast": {
      "post": {
        "operationId": "EventsController_trackEventToAll",
        "summary": "Broadcast event to all",
        "description": "Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc. In the future could be used to trigger events to a subset of subscribers based on defined filters.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerEventToAllRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerEventResponseDto"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/trigger/{transactionId}": {
      "delete": {
        "operationId": "EventsController_cancelDigest",
        "summary": "Cancel triggered event",
        "description": "\n    Using a previously generated transactionId during the event trigger,\n     will cancel any active or pending workflows. This is useful to cancel active digests and etc...\n    ",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/subscribers": {
      "get": {
        "operationId": "SubscribersController_getSubscribers",
        "summary": "Get subscribers",
        "description": "Returns a list of subscribers, could paginated using the `page` query parameter",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page to fetch, defaults to 0",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscribersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      },
      "post": {
        "operationId": "SubscribersController_createSubscriber",
        "summary": "Create subscriber",
        "description": "Create subscriber with your internal id for subscriber",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriberRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}": {
      "get": {
        "operationId": "SubscribersController_getSubscriber",
        "summary": "Get subscriber",
        "description": "Get subscriber by your internal id for subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      },
      "put": {
        "operationId": "SubscribersController_updateSubscriber",
        "summary": "Update subscriber",
        "description": "Update subscriber with your internal id for subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      },
      "delete": {
        "operationId": "SubscribersController_removeSubscriber",
        "summary": "Delete subscriber",
        "description": "Delete subscriber with your internal id for subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/credentials": {
      "put": {
        "operationId": "SubscribersController_updateSubscriberChannel",
        "summary": "Update subscriber channel details",
        "description": "Update subscribers channel details with your internal id for subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberChannelRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/preferences": {
      "get": {
        "operationId": "SubscribersController_getSubscriberPreference",
        "summary": "Get subscriber preferences",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateSubscriberPreferenceResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/preferences/{templateId}": {
      "patch": {
        "operationId": "SubscribersController_updateSubscriberPreference",
        "summary": "Update subscriber preference",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberPreferenceRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSubscriberPreferenceResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/notifications/feed": {
      "get": {
        "operationId": "SubscribersController_getNotificationsFeed",
        "summary": "Get notifications in feed",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "seen",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/notifications/unseen": {
      "get": {
        "operationId": "SubscribersController_getUnseenCount",
        "summary": "Get unseen count",
        "parameters": [
          {
            "name": "seen",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnseenCountResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/messages/{messageId}/seen": {
      "post": {
        "operationId": "SubscribersController_markMessageAsSeen",
        "summary": "Mark message as seen",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}": {
      "post": {
        "operationId": "SubscribersController_markActionAsSeen",
        "summary": "Mark action as seen",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ]
      }
    },
    "/v1/activity": {
      "get": {
        "operationId": "ActivityController_getActivityFeed",
        "summary": "Get activity feed",
        "parameters": [
          {
            "name": "channels",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "in_app",
                  "email",
                  "sms",
                  "chat",
                  "push"
                ]
              }
            }
          },
          {
            "name": "templates",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "emails",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitiesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/v1/activity/stats": {
      "get": {
        "operationId": "ActivityController_getActivityStats",
        "summary": "Get activity statistics",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityStatsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/v1/activity/graph/stats": {
      "get": {
        "operationId": "ActivityController_getActivityGraphStats",
        "summary": "Get activity graph statistics",
        "parameters": [
          {
            "name": "days",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityGraphqStatesResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/v1/channels/email/settings": {
      "put": {
        "operationId": "ChannelsController_updateMailSettings",
        "summary": "Update mail settings",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMailSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSettingsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Channels"
        ]
      }
    },
    "/v1/channels/sms/settings": {
      "put": {
        "operationId": "ChannelsController_updateSmsSettings",
        "summary": "Update sms settings",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSmsSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSettingsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Channels"
        ]
      }
    },
    "/v1/storage/upload-url": {
      "get": {
        "operationId": "StorageController_signedUrl",
        "summary": "Get upload url",
        "parameters": [
          {
            "name": "extension",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadUrlResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Storage"
        ]
      }
    },
    "/v1/integrations": {
      "get": {
        "operationId": "IntegrationsController_getIntegrations",
        "summary": "Get integrations",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ]
      },
      "post": {
        "operationId": "IntegrationsController_createIntegration",
        "summary": "Create integration",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/active": {
      "get": {
        "operationId": "IntegrationsController_getActiveIntegrations",
        "summary": "Get active integrations",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/{integrationId}": {
      "put": {
        "operationId": "IntegrationsController_updateIntegrationById",
        "summary": "Update integration",
        "parameters": [
          {
            "name": "integrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntegrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ]
      },
      "delete": {
        "operationId": "IntegrationsController_removeIntegration",
        "summary": "Delete integration",
        "parameters": [
          {
            "name": "integrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/feeds": {
      "post": {
        "operationId": "FeedsController_createFeed",
        "summary": "Create feed",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Feeds"
        ]
      },
      "get": {
        "operationId": "FeedsController_getFeeds",
        "summary": "Get feeds",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeedResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Feeds"
        ]
      }
    },
    "/v1/feeds/{feedId}": {
      "delete": {
        "operationId": "FeedsController_deleteFeedById",
        "summary": "Delete feed",
        "parameters": [
          {
            "name": "feedId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeedResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Feeds"
        ]
      }
    }
  },
  "info": {
    "title": "Novu API",
    "description": "The Novu API description",
    "version": "1.0",
    "contact": {
      
    }
  },
  "tags": [
    {
      "name": "Events",
      "description": ""
    },
    {
      "name": "Subscribers",
      "description": ""
    },
    {
      "name": "Activity",
      "description": ""
    },
    {
      "name": "Integrations",
      "description": ""
    },
    {
      "name": "Notification templates",
      "description": ""
    },
    {
      "name": "Notification groups",
      "description": ""
    },
    {
      "name": "Auth",
      "description": ""
    },
    {
      "name": "Changes",
      "description": ""
    },
    {
      "name": "Channels",
      "description": ""
    },
    {
      "name": "Environments",
      "description": ""
    },
    {
      "name": "Feeds",
      "description": ""
    },
    {
      "name": "Invites",
      "description": ""
    },
    {
      "name": "Organizations",
      "description": ""
    },
    {
      "name": "Storage",
      "description": ""
    },
    {
      "name": "Users",
      "description": ""
    }
  ],
  "servers": [
    
  ],
  "components": {
    "schemas": {
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "resetToken": {
            "type": "string"
          },
          "resetTokenDate": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "showOnBoarding": {
            "type": "boolean"
          }
        },
        "required": [
          "_id",
          "firstName",
          "lastName",
          "email",
          "profilePicture",
          "createdAt"
        ]
      },
      "UserOnboardingRequestDto": {
        "type": "object",
        "properties": {
          "showOnBoarding": {
            "type": "boolean"
          }
        },
        "required": [
          "showOnBoarding"
        ]
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "_userId": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "_userId"
        ]
      },
      "WidgetSettings": {
        "type": "object",
        "properties": {
          "notificationCenterEncryption": {
            "type": "boolean"
          }
        },
        "required": [
          "notificationCenterEncryption"
        ]
      },
      "EnvironmentResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "apiKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "widget": {
            "$ref": "#/components/schemas/WidgetSettings"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "_organizationId",
          "identifier",
          "apiKeys",
          "widget",
          "_parentId"
        ]
      },
      "CreateEnvironmentRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateWidgetSettingsRequestDto": {
        "type": "object",
        "properties": {
          "notificationCenterEncryption": {
            "type": "boolean"
          }
        },
        "required": [
          "notificationCenterEncryption"
        ]
      },
      "CreateNotificationGroupRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "NotificationGroupResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "_environmentId",
          "_organizationId"
        ]
      },
      "ChangeResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_creatorId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "NotificationTemplate",
              "MessageTemplate",
              "NotificationGroup",
              "FEED"
            ],
            "type": "string"
          },
          "change": {
            "type": "object"
          },
          "createdAt": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "_creatorId",
          "_environmentId",
          "_organizationId",
          "_entityId",
          "enabled",
          "type",
          "change",
          "createdAt"
        ]
      },
      "NotificationGroup": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "_environmentId",
          "_organizationId"
        ]
      },
      "PreferenceChannels": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean"
          },
          "sms": {
            "type": "boolean"
          },
          "in_app": {
            "type": "boolean"
          },
          "chat": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          }
        }
      },
      "MessageTemplate": {
        "type": "object",
        "properties": {
          
        }
      },
      "StepFilterChild": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "enum": [
              "LARGER",
              "SMALLER",
              "LARGER_EQUAL",
              "SMALLER_EQUAL",
              "EQUAL",
              "NOT_EQUAL",
              "ALL_IN",
              "ANY_IN",
              "NOT_IN",
              "BETWEEN",
              "NOT_BETWEEN",
              "LIKE",
              "NOT_LIKE"
            ]
          }
        },
        "required": [
          "field",
          "value",
          "operator"
        ]
      },
      "StepFilter": {
        "type": "object",
        "properties": {
          "isNegated": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "TEXT",
              "DATE",
              "NUMBER",
              "STATEMENT",
              "LIST",
              "MULTI_LIST",
              "GROUP"
            ]
          },
          "value": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ]
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilterChild"
            }
          }
        },
        "required": [
          "isNegated",
          "type",
          "value",
          "children"
        ]
      },
      "NotificationStepMetadata": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "unit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "digestKey": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "regular",
              "backoff"
            ]
          },
          "backoffUnit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "backoffAmount": {
            "type": "number"
          },
          "updateMode": {
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ]
      },
      "NotificationStep": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_templateId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "template": {
            "$ref": "#/components/schemas/MessageTemplate"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilter"
            }
          },
          "_parentId": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/NotificationStepMetadata"
          }
        }
      },
      "NotificationTriggerVariable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "NotificationTrigger": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          },
          "subscriberVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          }
        },
        "required": [
          "type",
          "identifier",
          "variables"
        ]
      },
      "NotificationTemplateResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "draft": {
            "type": "boolean"
          },
          "preferenceSettings": {
            "$ref": "#/components/schemas/PreferenceChannels"
          },
          "critical": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationStep"
            }
          },
          "_organizationId": {
            "type": "string"
          },
          "_creatorId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTrigger"
            }
          },
          "_notificationGroupId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          },
          "notificationGroup": {
            "$ref": "#/components/schemas/NotificationGroup"
          }
        },
        "required": [
          "name",
          "description",
          "active",
          "draft",
          "preferenceSettings",
          "critical",
          "tags",
          "steps",
          "_organizationId",
          "_creatorId",
          "_environmentId",
          "triggers",
          "_notificationGroupId",
          "deleted",
          "deletedAt",
          "deletedBy"
        ]
      },
      "UpdateNotificationTemplateRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "maxLength": 100
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationStep"
            }
          },
          "notificationGroupId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "critical": {
            "type": "boolean"
          },
          "preferenceSettings": {
            "$ref": "#/components/schemas/PreferenceChannels"
          }
        },
        "required": [
          "name",
          "notificationGroupId"
        ]
      },
      "MessageFilterChild": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "enum": [
              "LARGER",
              "SMALLER",
              "LARGER_EQUAL",
              "SMALLER_EQUAL",
              "EQUAL",
              "NOT_EQUAL",
              "ALL_IN",
              "ANY_IN",
              "NOT_IN",
              "BETWEEN",
              "NOT_BETWEEN",
              "LIKE",
              "NOT_LIKE"
            ]
          }
        },
        "required": [
          "field",
          "value",
          "operator"
        ]
      },
      "MessageFilter": {
        "type": "object",
        "properties": {
          "isNegated": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "TEXT",
              "DATE",
              "NUMBER",
              "STATEMENT",
              "LIST",
              "MULTI_LIST",
              "GROUP"
            ]
          },
          "value": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ]
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageFilterChild"
            }
          }
        },
        "required": [
          "isNegated",
          "type",
          "value",
          "children"
        ]
      },
      "NotificationChannel": {
        "type": "object",
        "properties": {
          "template": {
            "$ref": "#/components/schemas/MessageTemplate"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageFilter"
            }
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "CreateNotificationTemplateRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "notificationGroupId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "maxLength": 100
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationChannel"
            }
          },
          "active": {
            "type": "boolean"
          },
          "draft": {
            "type": "boolean"
          },
          "critical": {
            "type": "boolean"
          },
          "preferenceSettings": {
            "$ref": "#/components/schemas/PreferenceChannels"
          }
        },
        "required": [
          "name",
          "notificationGroupId",
          "steps"
        ]
      },
      "ChangeTemplateStatusRequestDto": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "active"
        ]
      },
      "SubscriberPayloadDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          }
        }
      },
      "TriggerEventRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The trigger identifier of the template you wish to send. This identifier can be found on the template page."
          },
          "payload": {
            "type": "object",
            "description": "The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it. \n      This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.",
            "example": {
              "comment_id": "string",
              "post": {
                "text": "string"
              }
            }
          },
          "overrides": {
            "type": "object",
            "description": "This could be used to override provider specific configurations",
            "example": {
              "fcm": {
                "color": "#fff"
              }
            }
          },
          "to": {
            "description": "The recipients list of people who will receive the notification",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SubscriberPayloadDto"
              },
              {
                "type": "[SubscriberPayloadDto]",
                "description": "List of subscriber objects"
              },
              {
                "type": "string",
                "description": "Unique identifier of a subscriber in your systems"
              },
              {
                "type": "[string]",
                "description": "List of subscriber identifiers"
              }
            ]
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for this transaction, we will generated a UUID if not provided."
          }
        },
        "required": [
          "name",
          "payload",
          "to"
        ]
      },
      "TriggerEventResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "If trigger was acknowledged or not"
          },
          "status": {
            "type": "string",
            "description": "Status for trigger",
            "enum": [
              "processed",
              "trigger_not_active",
              "template_not_found",
              "subscriber_id_missing"
            ]
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction id for trigger"
          }
        },
        "required": [
          "acknowledged",
          "status"
        ]
      },
      "TriggerEventToAllRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The trigger identifier associated for the template you wish to send. This identifier can be found on the template page."
          },
          "payload": {
            "type": "object",
            "description": "The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it. \n      This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.",
            "example": {
              "comment_id": "string",
              "post": {
                "text": "string"
              }
            }
          },
          "overrides": {
            "type": "object",
            "description": "This could be used to override provider specific configurations",
            "example": {
              "fcm": {
                "color": "#fff"
              }
            }
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for this transaction, we will generated a UUID if not provided."
          }
        },
        "required": [
          "name",
          "payload"
        ]
      },
      "ChannelCredentials": {
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "Webhook url for chat notificaton"
          },
          "notificationIdentifiers": {
            "description": "Device token for push or chat notificaton",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "webhookUrl"
        ]
      },
      "ChannelSettings": {
        "type": "object",
        "properties": {
          "_integrationId": {
            "type": "string",
            "description": "Id of the integration that is used for this channel"
          },
          "providerId": {
            "type": "string",
            "enum": [
              "slack",
              "discord",
              "fcm"
            ],
            "description": "Subscriber credentials for channel"
          },
          "credentials": {
            "description": "Subscriber credentials for channel",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCredentials"
              }
            ]
          }
        },
        "required": [
          "_integrationId",
          "providerId",
          "credentials"
        ]
      },
      "SubscriberResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "subscriberId": {
            "type": "string",
            "description": "Your internal identifire for subscriber"
          },
          "channels": {
            "description": "Channels settings for subscriber",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelSettings"
            }
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "subscriberId",
          "_organizationId",
          "_environmentId"
        ]
      },
      "SubscribersResponseDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "The current page of the paginated response"
          },
          "totalCount": {
            "type": "number",
            "description": "Total count of subscribers matching the query"
          },
          "pageSize": {
            "type": "number",
            "description": "Number of subscribers on each page"
          },
          "data": {
            "description": "The list of subscribers matching the query",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberResponseDto"
            }
          }
        },
        "required": [
          "page",
          "totalCount",
          "pageSize",
          "data"
        ]
      },
      "CreateSubscriberRequestDto": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "description": "Your internal identifire for subscriber"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "description": "Url for avatar image of your subscriber"
          }
        },
        "required": [
          "subscriberId"
        ]
      },
      "UpdateSubscriberRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          }
        }
      },
      "UpdateSubscriberChannelRequestDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "enum": [
              "slack",
              "discord",
              "fcm"
            ],
            "description": "Subscriber credentials for channel"
          },
          "credentials": {
            "description": "Subscriber credentials for channel",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCredentials"
              }
            ]
          }
        },
        "required": [
          "providerId",
          "credentials"
        ]
      },
      "DeleteSubscriberResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "If subscriber was deleted or not"
          },
          "status": {
            "type": "string",
            "description": "Status for subscriber",
            "enum": [
              "deleted"
            ]
          }
        },
        "required": [
          "acknowledged",
          "status"
        ]
      },
      "TemplateResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "critical": {
            "type": "boolean"
          }
        },
        "required": [
          "_id",
          "name",
          "critical"
        ]
      },
      "Preference": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "channels": {
            "$ref": "#/components/schemas/PreferenceChannels"
          }
        },
        "required": [
          "enabled",
          "channels"
        ]
      },
      "UpdateSubscriberPreferenceResponseDto": {
        "type": "object",
        "properties": {
          "template": {
            "$ref": "#/components/schemas/TemplateResponse"
          },
          "preference": {
            "$ref": "#/components/schemas/Preference"
          }
        },
        "required": [
          "template",
          "preference"
        ]
      },
      "ChannelPreference": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "in_app",
              "email",
              "sms",
              "chat",
              "push"
            ],
            "description": "The type of channel that is enabled or not"
          },
          "enabled": {
            "type": "boolean",
            "description": "If channel is enabled or not"
          }
        },
        "required": [
          "type",
          "enabled"
        ]
      },
      "UpdateSubscriberPreferenceRequestDto": {
        "type": "object",
        "properties": {
          "channel": {
            "description": "Channel with prefrence",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelPreference"
              }
            ]
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "EmailBlockStyles": {
        "type": "object",
        "properties": {
          "textDirection": {
            "type": "string",
            "enum": [
              "ltr",
              "rtl"
            ]
          }
        }
      },
      "EmailBlock": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text",
              "button"
            ]
          },
          "content": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "styles": {
            "$ref": "#/components/schemas/EmailBlockStyles"
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "MessageCTAData": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "MessageButton": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "primary",
              "secondary",
              "clicked"
            ],
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "resultContent": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "MessageActionResult": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object"
          },
          "type": {
            "enum": [
              "primary",
              "secondary",
              "clicked"
            ],
            "type": "string"
          }
        }
      },
      "MessageAction": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "pending",
              "done"
            ],
            "type": "string"
          },
          "buttons": {
            "$ref": "#/components/schemas/MessageButton"
          },
          "result": {
            "$ref": "#/components/schemas/MessageActionResult"
          }
        },
        "required": [
          "result"
        ]
      },
      "MessageCTA": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redirect"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MessageCTAData"
          },
          "action": {
            "$ref": "#/components/schemas/MessageAction"
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_templateId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_messageTemplateId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_notificationId": {
            "type": "string"
          },
          "_subscriberId": {
            "type": "string"
          },
          "subscriber": {
            "$ref": "#/components/schemas/SubscriberResponseDto"
          },
          "template": {
            "$ref": "#/components/schemas/NotificationTemplateResponse"
          },
          "templateIdentifier": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "content": {
            "oneOf": [
              {
                "type": "[EmailBlock]"
              },
              {
                "type": "string"
              }
            ]
          },
          "transactionId": {
            "type": "string"
          },
          "channel": {
            "enum": [
              "in_app",
              "email",
              "sms",
              "chat",
              "push"
            ],
            "type": "string"
          },
          "seen": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "directWebhookUrl": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "notificationIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "lastSeenDate": {
            "type": "string"
          },
          "cta": {
            "$ref": "#/components/schemas/MessageCTA"
          },
          "_feedId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "sent",
              "error",
              "warning"
            ]
          },
          "errorId": {
            "type": "string"
          },
          "errorText": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "description": "Oayload with data to be used inside of message templates",
            "example": {
              "name": "Novu"
            }
          },
          "overrides": {
            "type": "object",
            "description": "Overrides for push notification settings",
            "example": {
              "fcm": {
                "color": "#fff"
              }
            }
          },
          "subject": {
            "type": "string"
          }
        },
        "required": [
          "_templateId",
          "_environmentId",
          "_messageTemplateId",
          "_organizationId",
          "_notificationId",
          "_subscriberId",
          "content",
          "transactionId",
          "channel",
          "seen",
          "lastSeenDate",
          "cta",
          "_feedId",
          "status",
          "errorId",
          "errorText",
          "payload",
          "overrides"
        ]
      },
      "UnseenCountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          }
        },
        "required": [
          "count"
        ]
      },
      "ActivitiesResponseDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageResponseDto"
            }
          },
          "pageSize": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "required": [
          "totalCount",
          "data",
          "pageSize",
          "page"
        ]
      },
      "ActivityStatsResponseDto": {
        "type": "object",
        "properties": {
          "weeklySent": {
            "type": "number"
          },
          "monthlySent": {
            "type": "number"
          },
          "yearlySent": {
            "type": "number"
          }
        },
        "required": [
          "weeklySent",
          "monthlySent",
          "yearlySent"
        ]
      },
      "ActivityGraphqStatesResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "count": {
            "type": "number"
          }
        },
        "required": [
          "_id",
          "count"
        ]
      },
      "UpdateMailSettingsRequestDto": {
        "type": "object",
        "properties": {
          "senderEmail": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          }
        },
        "required": [
          "senderEmail",
          "senderName"
        ]
      },
      "UpdateSettingsResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "apiKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "widget": {
            "$ref": "#/components/schemas/WidgetSettings"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "_organizationId",
          "identifier",
          "apiKeys",
          "widget",
          "_parentId"
        ]
      },
      "Twilio": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string"
          },
          "accountSid": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          }
        },
        "required": [
          "authToken",
          "accountSid",
          "phoneNumber"
        ]
      },
      "UpdateSmsSettingsRequestDto": {
        "type": "object",
        "properties": {
          "twillio": {
            "$ref": "#/components/schemas/Twilio"
          }
        },
        "required": [
          "twillio"
        ]
      },
      "UploadUrlResponse": {
        "type": "object",
        "properties": {
          "signedUrl": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "signedUrl",
          "path"
        ]
      },
      "CredentialsDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "accountSid": {
            "type": "string"
          },
          "messageProfileId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          }
        }
      },
      "IntegrationResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "channel": {
            "enum": [
              "in_app",
              "email",
              "sms",
              "chat",
              "push"
            ],
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsDto"
          },
          "active": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          }
        },
        "required": [
          "_environmentId",
          "_organizationId",
          "providerId",
          "channel",
          "credentials",
          "active",
          "deleted",
          "deletedAt",
          "deletedBy"
        ]
      },
      "CreateIntegrationRequestDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string"
          },
          "channel": {
            "enum": [
              "in_app",
              "email",
              "sms",
              "chat",
              "push"
            ],
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsDto"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "providerId",
          "channel",
          "credentials",
          "active"
        ]
      },
      "UpdateIntegrationRequestDto": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsDto"
          }
        },
        "required": [
          "active",
          "credentials"
        ]
      },
      "CreateFeedRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "FeedResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "identifier",
          "_environmentId",
          "_organizationId"
        ]
      }
    }
  }
}